node {
  name: "input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 150
        }
        dim {
          size: 32
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "targets/shape"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "targets/values"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "targets/indices"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "seq_len"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10127393901348114
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10127393901348114
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d/kernel/Initializer/random_uniform/max"
  input: "conv2d/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d/kernel/Initializer/random_uniform/mul"
  input: "conv2d/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d/kernel/Assign"
  op: "Assign"
  input: "conv2d/kernel"
  input: "conv2d/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d/kernel/read"
  op: "Identity"
  input: "conv2d/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d/bias/Assign"
  op: "Assign"
  input: "conv2d/bias"
  input: "conv2d/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d/bias/read"
  op: "Identity"
  input: "conv2d/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
}
node {
  name: "conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d/Conv2D"
  op: "Conv2D"
  input: "input"
  input: "conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d/BiasAdd"
  op: "BiasAdd"
  input: "conv2d/Conv2D"
  input: "conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d/Relu"
  op: "Relu"
  input: "conv2d/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "max_pooling2d/MaxPool"
  op: "MaxPool"
  input: "conv2d/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0589255653321743
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0589255653321743
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_1/kernel/Initializer/random_uniform/max"
  input: "conv2d_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_1/kernel/Initializer/random_uniform/mul"
  input: "conv2d_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_1/kernel/Assign"
  op: "Assign"
  input: "conv2d_1/kernel"
  input: "conv2d_1/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_1/kernel/read"
  op: "Identity"
  input: "conv2d_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_1/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_1/bias/Assign"
  op: "Assign"
  input: "conv2d_1/bias"
  input: "conv2d_1/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_1/bias/read"
  op: "Identity"
  input: "conv2d_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
}
node {
  name: "conv2d_1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_1/Conv2D"
  op: "Conv2D"
  input: "max_pooling2d/MaxPool"
  input: "conv2d_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_1/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_1/Conv2D"
  input: "conv2d_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d_1/Relu"
  op: "Relu"
  input: "conv2d_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "max_pooling2d_1/MaxPool"
  op: "MaxPool"
  input: "conv2d_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0416666679084301
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0416666679084301
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_2/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_2/kernel/Initializer/random_uniform/max"
  input: "conv2d_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_2/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_2/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_2/kernel/Initializer/random_uniform/mul"
  input: "conv2d_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_2/kernel/Assign"
  op: "Assign"
  input: "conv2d_2/kernel"
  input: "conv2d_2/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_2/kernel/read"
  op: "Identity"
  input: "conv2d_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_2/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_2/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_2/bias/Assign"
  op: "Assign"
  input: "conv2d_2/bias"
  input: "conv2d_2/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_2/bias/read"
  op: "Identity"
  input: "conv2d_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
}
node {
  name: "conv2d_2/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_2/Conv2D"
  op: "Conv2D"
  input: "max_pooling2d_1/MaxPool"
  input: "conv2d_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_2/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_2/Conv2D"
  input: "conv2d_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d_2/Relu"
  op: "Relu"
  input: "conv2d_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/gamma/Assign"
  op: "Assign"
  input: "batch_normalization/gamma"
  input: "batch_normalization/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/gamma/read"
  op: "Identity"
  input: "batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/beta/Assign"
  op: "Assign"
  input: "batch_normalization/beta"
  input: "batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/beta/read"
  op: "Identity"
  input: "batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
}
node {
  name: "batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization/moving_mean"
  input: "batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/moving_mean/read"
  op: "Identity"
  input: "batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization/moving_variance"
  input: "batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/moving_variance/read"
  op: "Identity"
  input: "batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "conv2d_2/Relu"
  input: "batch_normalization/gamma/read"
  input: "batch_normalization/beta/read"
  input: "batch_normalization/moving_mean/read"
  input: "batch_normalization/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.03608439117670059
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03608439117670059
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_3/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_3/kernel/Initializer/random_uniform/max"
  input: "conv2d_3/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_3/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_3/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_3/kernel/Initializer/random_uniform/mul"
  input: "conv2d_3/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_3/kernel/Assign"
  op: "Assign"
  input: "conv2d_3/kernel"
  input: "conv2d_3/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_3/kernel/read"
  op: "Identity"
  input: "conv2d_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_3/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_3/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_3/bias/Assign"
  op: "Assign"
  input: "conv2d_3/bias"
  input: "conv2d_3/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_3/bias/read"
  op: "Identity"
  input: "conv2d_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
}
node {
  name: "conv2d_3/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_3/Conv2D"
  op: "Conv2D"
  input: "batch_normalization/FusedBatchNorm"
  input: "conv2d_3/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_3/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_3/Conv2D"
  input: "conv2d_3/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d_3/Relu"
  op: "Relu"
  input: "conv2d_3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "max_pooling2d_2/MaxPool"
  op: "MaxPool"
  input: "conv2d_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.02946278266608715
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.02946278266608715
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_4/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_4/kernel/Initializer/random_uniform/max"
  input: "conv2d_4/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_4/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_4/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_4/kernel/Initializer/random_uniform/mul"
  input: "conv2d_4/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
}
node {
  name: "conv2d_4/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_4/kernel/Assign"
  op: "Assign"
  input: "conv2d_4/kernel"
  input: "conv2d_4/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_4/kernel/read"
  op: "Identity"
  input: "conv2d_4/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
}
node {
  name: "conv2d_4/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_4/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_4/bias/Assign"
  op: "Assign"
  input: "conv2d_4/bias"
  input: "conv2d_4/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_4/bias/read"
  op: "Identity"
  input: "conv2d_4/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
}
node {
  name: "conv2d_4/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_4/Conv2D"
  op: "Conv2D"
  input: "max_pooling2d_2/MaxPool"
  input: "conv2d_4/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_4/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_4/Conv2D"
  input: "conv2d_4/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d_4/Relu"
  op: "Relu"
  input: "conv2d_4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Assign"
  op: "Assign"
  input: "batch_normalization_1/gamma"
  input: "batch_normalization_1/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/gamma/read"
  op: "Identity"
  input: "batch_normalization_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/beta/Assign"
  op: "Assign"
  input: "batch_normalization_1/beta"
  input: "batch_normalization_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/beta/read"
  op: "Identity"
  input: "batch_normalization_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization_1/moving_mean"
  input: "batch_normalization_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/read"
  op: "Identity"
  input: "batch_normalization_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization_1/moving_variance"
  input: "batch_normalization_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/read"
  op: "Identity"
  input: "batch_normalization_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "conv2d_4/Relu"
  input: "batch_normalization_1/gamma/read"
  input: "batch_normalization_1/beta/read"
  input: "batch_normalization_1/moving_mean/read"
  input: "batch_normalization_1/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.025515519082546234
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.025515519082546234
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_5/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_5/kernel/Initializer/random_uniform/max"
  input: "conv2d_5/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_5/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_5/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_5/kernel/Initializer/random_uniform/mul"
  input: "conv2d_5/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
}
node {
  name: "conv2d_5/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_5/kernel/Assign"
  op: "Assign"
  input: "conv2d_5/kernel"
  input: "conv2d_5/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_5/kernel/read"
  op: "Identity"
  input: "conv2d_5/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
}
node {
  name: "conv2d_5/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_5/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_5/bias/Assign"
  op: "Assign"
  input: "conv2d_5/bias"
  input: "conv2d_5/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_5/bias/read"
  op: "Identity"
  input: "conv2d_5/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
}
node {
  name: "conv2d_5/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_5/Conv2D"
  op: "Conv2D"
  input: "batch_normalization_1/FusedBatchNorm"
  input: "conv2d_5/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_5/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_5/Conv2D"
  input: "conv2d_5/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d_5/Relu"
  op: "Relu"
  input: "conv2d_5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "max_pooling2d_3/MaxPool"
  op: "MaxPool"
  input: "conv2d_5/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.03827327862381935
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03827327862381935
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_6/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_6/kernel/Initializer/random_uniform/max"
  input: "conv2d_6/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_6/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_6/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_6/kernel/Initializer/random_uniform/mul"
  input: "conv2d_6/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
}
node {
  name: "conv2d_6/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_6/kernel/Assign"
  op: "Assign"
  input: "conv2d_6/kernel"
  input: "conv2d_6/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_6/kernel/read"
  op: "Identity"
  input: "conv2d_6/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
}
node {
  name: "conv2d_6/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_6/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_6/bias/Assign"
  op: "Assign"
  input: "conv2d_6/bias"
  input: "conv2d_6/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_6/bias/read"
  op: "Identity"
  input: "conv2d_6/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
}
node {
  name: "conv2d_6/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_6/Conv2D"
  op: "Conv2D"
  input: "max_pooling2d_3/MaxPool"
  input: "conv2d_6/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_6/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_6/Conv2D"
  input: "conv2d_6/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d_6/Relu"
  op: "Relu"
  input: "conv2d_6/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Squeeze"
  op: "Squeeze"
  input: "conv2d_6/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/range"
  op: "Range"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/range/start"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Rank"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/concat"
  op: "ConcatV2"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/concat/values_0"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/range"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/transpose"
  op: "Transpose"
  input: "Squeeze"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/sequence_length"
  op: "Identity"
  input: "seq_len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Shape"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice"
  op: "StridedSlice"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice/stack"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims_2"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_2"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Shape_1"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/sequence_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/stack"
  op: "Pack"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Equal"
  op: "Equal"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Shape_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/All"
  op: "All"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Equal"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor bidirectional-rnn-1/bidirectional_rnn/fw/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor bidirectional-rnn-1/bidirectional_rnn/fw/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Assert/Assert"
  op: "Assert"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/All"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/stack"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/CheckSeqLen"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/sequence_length"
  input: "^bidirectional-rnn-1/bidirectional_rnn/fw/fw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Shape_2"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Shape_2"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice_1/stack"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice_1/stack_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Shape_3"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Shape_3"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice_2/stack"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice_2/stack_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice_2"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/concat_1"
  op: "ConcatV2"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/ExpandDims"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Const_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/zeros"
  op: "Fill"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/concat_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Min"
  op: "Min"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Max"
  op: "Max"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray"
  op: "TensorArrayV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice_1"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray_1"
  op: "TensorArrayV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice_1"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  op: "Range"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/transpose"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/transpose"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Maximum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Maximum"
  op: "Maximum"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Maximum/x"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Minimum"
  op: "Minimum"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Enter_1"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Enter_2"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Enter_3"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Enter_4"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge"
  op: "Merge"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_1"
  op: "Merge"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Enter_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_2"
  op: "Merge"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Enter_2"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_3"
  op: "Merge"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Enter_3"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_4"
  op: "Merge"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Enter_4"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Less"
  op: "Less"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Less/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Less_1"
  op: "Less"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Less_1/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/LogicalAnd"
  op: "LogicalAnd"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Less"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Less_1"
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/LoopCond"
  op: "LoopCond"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/LogicalAnd"
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch"
  op: "Switch"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_1"
  op: "Switch"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_2"
  op: "Switch"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_2"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_3"
  op: "Switch"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_3"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_4"
  op: "Switch"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_4"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_4"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_1"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_2"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_3"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_4"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/add/y"
  op: "Const"
  input: "^bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/add"
  op: "Add"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\003\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0578637570142746
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0578637570142746
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 768
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/zeros"
  op: "Fill"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Const"
  op: "Const"
  input: "^bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_4"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Const_1"
  op: "Const"
  input: "^bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split"
  op: "Split"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Const"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Const_2"
  op: "Const"
  input: "^bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add"
  op: "Add"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split:2"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul"
  op: "Mul"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1"
  op: "Mul"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1"
  op: "Add"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
  op: "Mul"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select"
  op: "Select"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1"
  op: "Select"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2"
  op: "Select"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_4"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/add_1/y"
  op: "Const"
  input: "^bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/add_1"
  op: "Add"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/NextIteration"
  op: "NextIteration"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/NextIteration_4"
  op: "NextIteration"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Exit"
  op: "Exit"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Exit_1"
  op: "Exit"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Exit_2"
  op: "Exit"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Exit_3"
  op: "Exit"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Exit_4"
  op: "Exit"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  op: "Range"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/range_1"
  op: "Range"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/range_1/start"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/Rank_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/concat_2/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/concat_2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/concat_2"
  op: "ConcatV2"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/concat_2/values_0"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/range_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/transpose_1"
  op: "Transpose"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/ReverseSequence"
  op: "ReverseSequence"
  input: "Squeeze"
  input: "seq_len"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/range"
  op: "Range"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/range/start"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Rank"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/concat"
  op: "ConcatV2"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/concat/values_0"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/range"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/transpose"
  op: "Transpose"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/ReverseSequence"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/sequence_length"
  op: "Identity"
  input: "seq_len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Shape"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice"
  op: "StridedSlice"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice/stack"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims_2"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_2"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Shape_1"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/sequence_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/stack"
  op: "Pack"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Equal"
  op: "Equal"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Shape_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/All"
  op: "All"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Equal"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor bidirectional-rnn-1/bidirectional_rnn/bw/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor bidirectional-rnn-1/bidirectional_rnn/bw/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Assert/Assert"
  op: "Assert"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/All"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/stack"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/CheckSeqLen"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/sequence_length"
  input: "^bidirectional-rnn-1/bidirectional_rnn/bw/bw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Shape_2"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Shape_2"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice_1/stack"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice_1/stack_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Shape_3"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Shape_3"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice_2/stack"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice_2/stack_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice_2"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/concat_1"
  op: "ConcatV2"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/ExpandDims"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Const_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/zeros"
  op: "Fill"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/concat_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Min"
  op: "Min"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Max"
  op: "Max"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray"
  op: "TensorArrayV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice_1"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray_1"
  op: "TensorArrayV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice_1"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  op: "Range"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/transpose"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/transpose"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Maximum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Maximum"
  op: "Maximum"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Maximum/x"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Minimum"
  op: "Minimum"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Enter_1"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Enter_2"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Enter_3"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Enter_4"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge"
  op: "Merge"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_1"
  op: "Merge"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Enter_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_2"
  op: "Merge"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Enter_2"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_3"
  op: "Merge"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Enter_3"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_4"
  op: "Merge"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Enter_4"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Less"
  op: "Less"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Less/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Less_1"
  op: "Less"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Less_1/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/LogicalAnd"
  op: "LogicalAnd"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Less"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Less_1"
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/LoopCond"
  op: "LoopCond"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/LogicalAnd"
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch"
  op: "Switch"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_1"
  op: "Switch"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_2"
  op: "Switch"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_2"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_3"
  op: "Switch"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_3"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_4"
  op: "Switch"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_4"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_4"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_1"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_2"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_3"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_4"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/add/y"
  op: "Const"
  input: "^bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/add"
  op: "Add"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\003\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0578637570142746
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0578637570142746
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 768
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/zeros"
  op: "Fill"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Const"
  op: "Const"
  input: "^bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_4"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Const_1"
  op: "Const"
  input: "^bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split"
  op: "Split"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Const"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Const_2"
  op: "Const"
  input: "^bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add"
  op: "Add"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split:2"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul"
  op: "Mul"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1"
  op: "Mul"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1"
  op: "Add"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
  op: "Mul"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select"
  op: "Select"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1"
  op: "Select"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2"
  op: "Select"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_4"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/add_1/y"
  op: "Const"
  input: "^bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/add_1"
  op: "Add"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/NextIteration"
  op: "NextIteration"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/NextIteration_4"
  op: "NextIteration"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Exit"
  op: "Exit"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Exit_1"
  op: "Exit"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Exit_2"
  op: "Exit"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Exit_3"
  op: "Exit"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Exit_4"
  op: "Exit"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  op: "Range"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/range_1"
  op: "Range"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/range_1/start"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/Rank_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/concat_2/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/concat_2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/concat_2"
  op: "ConcatV2"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/concat_2/values_0"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/range_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/transpose_1"
  op: "Transpose"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/ReverseSequence"
  op: "ReverseSequence"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/transpose_1"
  input: "seq_len"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional-rnn-1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/concat"
  op: "ConcatV2"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/transpose_1"
  input: "bidirectional-rnn-1/ReverseSequence"
  input: "bidirectional-rnn-1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/range"
  op: "Range"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/range/start"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Rank"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/concat"
  op: "ConcatV2"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/concat/values_0"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/range"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/transpose"
  op: "Transpose"
  input: "bidirectional-rnn-1/concat"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/sequence_length"
  op: "Identity"
  input: "seq_len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Shape"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice"
  op: "StridedSlice"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice/stack"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims_2"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_2"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Shape_1"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/sequence_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/stack"
  op: "Pack"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Equal"
  op: "Equal"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Shape_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/All"
  op: "All"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Equal"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor bidirectional-rnn-2/bidirectional_rnn/fw/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor bidirectional-rnn-2/bidirectional_rnn/fw/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Assert/Assert"
  op: "Assert"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/All"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/stack"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/CheckSeqLen"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/sequence_length"
  input: "^bidirectional-rnn-2/bidirectional_rnn/fw/fw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Shape_2"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Shape_2"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice_1/stack"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice_1/stack_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Shape_3"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Shape_3"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice_2/stack"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice_2/stack_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice_2"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/concat_1"
  op: "ConcatV2"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/ExpandDims"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Const_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/zeros"
  op: "Fill"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/concat_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Min"
  op: "Min"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Max"
  op: "Max"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray"
  op: "TensorArrayV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice_1"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray_1"
  op: "TensorArrayV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice_1"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  op: "Range"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/transpose"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/transpose"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Maximum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Maximum"
  op: "Maximum"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Maximum/x"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Minimum"
  op: "Minimum"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Enter_1"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Enter_2"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Enter_3"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Enter_4"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge"
  op: "Merge"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_1"
  op: "Merge"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Enter_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_2"
  op: "Merge"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Enter_2"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_3"
  op: "Merge"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Enter_3"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_4"
  op: "Merge"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Enter_4"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Less"
  op: "Less"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Less/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Less_1"
  op: "Less"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Less_1/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/LogicalAnd"
  op: "LogicalAnd"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Less"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Less_1"
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/LoopCond"
  op: "LoopCond"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/LogicalAnd"
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch"
  op: "Switch"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_1"
  op: "Switch"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_2"
  op: "Switch"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_2"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_3"
  op: "Switch"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_3"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_4"
  op: "Switch"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_4"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_4"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_1"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_2"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_3"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_4"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/add/y"
  op: "Const"
  input: "^bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/add"
  op: "Add"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\003\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0578637570142746
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0578637570142746
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 768
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/zeros"
  op: "Fill"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Const"
  op: "Const"
  input: "^bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_4"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Const_1"
  op: "Const"
  input: "^bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split"
  op: "Split"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Const"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Const_2"
  op: "Const"
  input: "^bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add"
  op: "Add"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split:2"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul"
  op: "Mul"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1"
  op: "Mul"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1"
  op: "Add"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
  op: "Mul"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select"
  op: "Select"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1"
  op: "Select"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2"
  op: "Select"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_4"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/add_1/y"
  op: "Const"
  input: "^bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/add_1"
  op: "Add"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/NextIteration"
  op: "NextIteration"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/NextIteration_4"
  op: "NextIteration"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Exit"
  op: "Exit"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Exit_1"
  op: "Exit"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Exit_2"
  op: "Exit"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Exit_3"
  op: "Exit"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Exit_4"
  op: "Exit"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  op: "Range"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/range_1"
  op: "Range"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/range_1/start"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/Rank_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/concat_2/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/concat_2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/concat_2"
  op: "ConcatV2"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/concat_2/values_0"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/range_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/transpose_1"
  op: "Transpose"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/ReverseSequence"
  op: "ReverseSequence"
  input: "bidirectional-rnn-1/concat"
  input: "seq_len"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/range"
  op: "Range"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/range/start"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Rank"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/concat"
  op: "ConcatV2"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/concat/values_0"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/range"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/transpose"
  op: "Transpose"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/ReverseSequence"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/sequence_length"
  op: "Identity"
  input: "seq_len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Shape"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice"
  op: "StridedSlice"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice/stack"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims_2"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_2"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Shape_1"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/sequence_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/stack"
  op: "Pack"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Equal"
  op: "Equal"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Shape_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/All"
  op: "All"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Equal"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor bidirectional-rnn-2/bidirectional_rnn/bw/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor bidirectional-rnn-2/bidirectional_rnn/bw/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Assert/Assert"
  op: "Assert"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/All"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/stack"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/CheckSeqLen"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/sequence_length"
  input: "^bidirectional-rnn-2/bidirectional_rnn/bw/bw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Shape_2"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Shape_2"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice_1/stack"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice_1/stack_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Shape_3"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Shape_3"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice_2/stack"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice_2/stack_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice_2"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/concat_1"
  op: "ConcatV2"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/ExpandDims"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Const_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/zeros"
  op: "Fill"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/concat_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Min"
  op: "Min"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Max"
  op: "Max"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray"
  op: "TensorArrayV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice_1"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray_1"
  op: "TensorArrayV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice_1"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  op: "Range"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/transpose"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/transpose"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Maximum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Maximum"
  op: "Maximum"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Maximum/x"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Minimum"
  op: "Minimum"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Enter_1"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Enter_2"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Enter_3"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Enter_4"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge"
  op: "Merge"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_1"
  op: "Merge"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Enter_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_2"
  op: "Merge"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Enter_2"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_3"
  op: "Merge"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Enter_3"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_4"
  op: "Merge"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Enter_4"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Less"
  op: "Less"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Less/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Less_1"
  op: "Less"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Less_1/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/LogicalAnd"
  op: "LogicalAnd"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Less"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Less_1"
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/LoopCond"
  op: "LoopCond"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/LogicalAnd"
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch"
  op: "Switch"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_1"
  op: "Switch"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_2"
  op: "Switch"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_2"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_3"
  op: "Switch"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_3"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_4"
  op: "Switch"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_4"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_4"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_1"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_2"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_3"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_4"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/add/y"
  op: "Const"
  input: "^bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/add"
  op: "Add"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\003\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0578637570142746
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0578637570142746
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 768
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/zeros"
  op: "Fill"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Const"
  op: "Const"
  input: "^bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_4"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Const_1"
  op: "Const"
  input: "^bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split"
  op: "Split"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Const"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Const_2"
  op: "Const"
  input: "^bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add"
  op: "Add"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split:2"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul"
  op: "Mul"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1"
  op: "Mul"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1"
  op: "Add"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
  op: "Mul"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select"
  op: "Select"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1"
  op: "Select"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2"
  op: "Select"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_4"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/add_1/y"
  op: "Const"
  input: "^bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/add_1"
  op: "Add"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/NextIteration"
  op: "NextIteration"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/NextIteration_4"
  op: "NextIteration"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Exit"
  op: "Exit"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Exit_1"
  op: "Exit"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Exit_2"
  op: "Exit"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Exit_3"
  op: "Exit"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Exit_4"
  op: "Exit"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  op: "Range"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/range_1"
  op: "Range"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/range_1/start"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/Rank_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/concat_2/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/concat_2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/concat_2"
  op: "ConcatV2"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/concat_2/values_0"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/range_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/transpose_1"
  op: "Transpose"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/ReverseSequence"
  op: "ReverseSequence"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/transpose_1"
  input: "seq_len"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional-rnn-2/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/concat"
  op: "ConcatV2"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/transpose_1"
  input: "bidirectional-rnn-2/ReverseSequence"
  input: "bidirectional-rnn-2/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\000\002\000\000"
      }
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "bidirectional-rnn-2/concat"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "truncated_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000%\000\000\000"
      }
    }
  }
}
node {
  name: "truncated_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "truncated_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "truncated_normal/mul"
  op: "Mul"
  input: "truncated_normal/TruncatedNormal"
  input: "truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "truncated_normal"
  op: "Add"
  input: "truncated_normal/mul"
  input: "truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "W"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 37
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "W/Assign"
  op: "Assign"
  input: "W"
  input: "truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "W/read"
  op: "Identity"
  input: "W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 37
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "b"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 37
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "b/Assign"
  op: "Assign"
  input: "b"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "b/read"
  op: "Identity"
  input: "b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b"
      }
    }
  }
}
node {
  name: "MatMul"
  op: "MatMul"
  input: "Reshape"
  input: "W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "MatMul"
  input: "b/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Shape"
  op: "Shape"
  input: "conv2d_6/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape_1/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 36
      }
    }
  }
}
node {
  name: "Reshape_1/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 37
      }
    }
  }
}
node {
  name: "Reshape_1/shape"
  op: "Pack"
  input: "strided_slice"
  input: "Reshape_1/shape/1"
  input: "Reshape_1/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_1"
  op: "Reshape"
  input: "add"
  input: "Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transpose"
  op: "Transpose"
  input: "Reshape_1"
  input: "transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "CTCLoss"
  op: "CTCLoss"
  input: "transpose"
  input: "targets/indices"
  input: "targets/values"
  input: "seq_len"
  attr {
    key: "ctc_merge_repeated"
    value {
      b: true
    }
  }
  attr {
    key: "ignore_longer_outputs_than_inputs"
    value {
      b: true
    }
  }
  attr {
    key: "preprocess_collapse_repeated"
    value {
      b: false
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "CTCLoss"
  input: "Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_1"
  op: "Enter"
  input: "gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge"
  op: "Merge"
  input: "gradients/f_count_1"
  input: "gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Switch"
  op: "Switch"
  input: "gradients/Merge"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Add/y"
  op: "Const"
  input: "^bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add"
  op: "Add"
  input: "gradients/Switch:1"
  input: "gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/NextIteration"
  op: "NextIteration"
  input: "gradients/Add"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count_2"
  op: "Exit"
  input: "gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/b_count"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_1"
  op: "Enter"
  input: "gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_1"
  op: "Merge"
  input: "gradients/b_count_1"
  input: "gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/Merge_1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_2"
  op: "LoopCond"
  input: "gradients/GreaterEqual"
}
node {
  name: "gradients/Switch_1"
  op: "Switch"
  input: "gradients/Merge_1"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sub"
  op: "Sub"
  input: "gradients/Switch_1:1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/NextIteration_1"
  op: "NextIteration"
  input: "gradients/Sub"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/b_count_3"
  op: "Exit"
  input: "gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_4"
  op: "Enter"
  input: "gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_2"
  op: "Merge"
  input: "gradients/f_count_4"
  input: "gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Switch_2"
  op: "Switch"
  input: "gradients/Merge_2"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Add_1/y"
  op: "Const"
  input: "^bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add_1"
  op: "Add"
  input: "gradients/Switch_2:1"
  input: "gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/NextIteration_2"
  op: "NextIteration"
  input: "gradients/Add_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/StackPushV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count_5"
  op: "Exit"
  input: "gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/b_count_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_5"
  op: "Enter"
  input: "gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_3"
  op: "Merge"
  input: "gradients/b_count_5"
  input: "gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "gradients/Merge_3"
  input: "gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_6"
  op: "LoopCond"
  input: "gradients/GreaterEqual_1"
}
node {
  name: "gradients/Switch_3"
  op: "Switch"
  input: "gradients/Merge_3"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sub_1"
  op: "Sub"
  input: "gradients/Switch_3:1"
  input: "gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/NextIteration_3"
  op: "NextIteration"
  input: "gradients/Sub_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/b_count_7"
  op: "Exit"
  input: "gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_7"
  op: "Enter"
  input: "gradients/f_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_4"
  op: "Merge"
  input: "gradients/f_count_7"
  input: "gradients/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Switch_4"
  op: "Switch"
  input: "gradients/Merge_4"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Add_2/y"
  op: "Const"
  input: "^bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add_2"
  op: "Add"
  input: "gradients/Switch_4:1"
  input: "gradients/Add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/NextIteration_4"
  op: "NextIteration"
  input: "gradients/Add_2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count_8"
  op: "Exit"
  input: "gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/b_count_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_9"
  op: "Enter"
  input: "gradients/f_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_5"
  op: "Merge"
  input: "gradients/b_count_9"
  input: "gradients/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/GreaterEqual_2"
  op: "GreaterEqual"
  input: "gradients/Merge_5"
  input: "gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/GreaterEqual_2/Enter"
  op: "Enter"
  input: "gradients/b_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_10"
  op: "LoopCond"
  input: "gradients/GreaterEqual_2"
}
node {
  name: "gradients/Switch_5"
  op: "Switch"
  input: "gradients/Merge_5"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sub_2"
  op: "Sub"
  input: "gradients/Switch_5:1"
  input: "gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/NextIteration_5"
  op: "NextIteration"
  input: "gradients/Sub_2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/b_count_11"
  op: "Exit"
  input: "gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_10"
  op: "Enter"
  input: "gradients/f_count_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_6"
  op: "Merge"
  input: "gradients/f_count_10"
  input: "gradients/NextIteration_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Switch_6"
  op: "Switch"
  input: "gradients/Merge_6"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Add_3/y"
  op: "Const"
  input: "^bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add_3"
  op: "Add"
  input: "gradients/Switch_6:1"
  input: "gradients/Add_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/NextIteration_6"
  op: "NextIteration"
  input: "gradients/Add_3"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/StackPushV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count_11"
  op: "Exit"
  input: "gradients/Switch_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/b_count_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_13"
  op: "Enter"
  input: "gradients/f_count_11"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_7"
  op: "Merge"
  input: "gradients/b_count_13"
  input: "gradients/NextIteration_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/GreaterEqual_3"
  op: "GreaterEqual"
  input: "gradients/Merge_7"
  input: "gradients/GreaterEqual_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/GreaterEqual_3/Enter"
  op: "Enter"
  input: "gradients/b_count_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_14"
  op: "LoopCond"
  input: "gradients/GreaterEqual_3"
}
node {
  name: "gradients/Switch_7"
  op: "Switch"
  input: "gradients/Merge_7"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sub_3"
  op: "Sub"
  input: "gradients/Switch_7:1"
  input: "gradients/GreaterEqual_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/NextIteration_7"
  op: "NextIteration"
  input: "gradients/Sub_3"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/b_count_15"
  op: "Exit"
  input: "gradients/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape"
  op: "Shape"
  input: "CTCLoss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_grad/Reshape"
  input: "gradients/Mean_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_1"
  op: "Shape"
  input: "CTCLoss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_1"
  input: "gradients/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_2"
  input: "gradients/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/Mean_grad/Prod_1"
  input: "gradients/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Prod"
  input: "gradients/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Cast"
  op: "Cast"
  input: "gradients/Mean_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_grad/Tile"
  input: "gradients/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like"
  op: "ZerosLike"
  input: "CTCLoss:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/CTCLoss_grad/PreventGradient"
  op: "PreventGradient"
  input: "CTCLoss:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "message"
    value {
      s: "Currently there is no way to take the second  derivative of ctc_loss due to the fused implementation\'s interaction  with tf.gradients()"
    }
  }
}
node {
  name: "gradients/CTCLoss_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/CTCLoss_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/Mean_grad/truediv"
  input: "gradients/CTCLoss_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/CTCLoss_grad/mul"
  op: "Mul"
  input: "gradients/CTCLoss_grad/ExpandDims"
  input: "gradients/CTCLoss_grad/PreventGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/CTCLoss_grad/mul"
  input: "gradients/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Reshape_1_grad/Shape"
  op: "Shape"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/transpose_grad/transpose"
  input: "gradients/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_grad/Shape"
  op: "Shape"
  input: "MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 37
      }
    }
  }
}
node {
  name: "gradients/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/add_grad/Shape"
  input: "gradients/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_grad/Sum"
  op: "Sum"
  input: "gradients/Reshape_1_grad/Reshape"
  input: "gradients/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_grad/Sum"
  input: "gradients/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/Reshape_1_grad/Reshape"
  input: "gradients/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/add_grad/Sum_1"
  input: "gradients/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/add_grad/Reshape"
  input: "^gradients/add_grad/Reshape_1"
}
node {
  name: "gradients/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/add_grad/Reshape"
  input: "^gradients/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/add_grad/Reshape_1"
  input: "^gradients/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/add_grad/tuple/control_dependency"
  input: "W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Reshape"
  input: "gradients/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/MatMul_grad/MatMul"
  input: "^gradients/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/MatMul_grad/MatMul"
  input: "^gradients/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/MatMul_grad/MatMul_1"
  input: "^gradients/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/Reshape_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-2/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/MatMul_grad/tuple/control_dependency"
  input: "gradients/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/concat_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/concat_grad/mod"
  op: "FloorMod"
  input: "bidirectional-rnn-2/concat/axis"
  input: "gradients/bidirectional-rnn-2/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/concat_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/concat_grad/ShapeN"
  op: "ShapeN"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/transpose_1"
  input: "bidirectional-rnn-2/ReverseSequence"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/bidirectional-rnn-2/concat_grad/mod"
  input: "gradients/bidirectional-rnn-2/concat_grad/ShapeN"
  input: "gradients/bidirectional-rnn-2/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/concat_grad/Slice"
  op: "Slice"
  input: "gradients/Reshape_grad/Reshape"
  input: "gradients/bidirectional-rnn-2/concat_grad/ConcatOffset"
  input: "gradients/bidirectional-rnn-2/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/Reshape_grad/Reshape"
  input: "gradients/bidirectional-rnn-2/concat_grad/ConcatOffset:1"
  input: "gradients/bidirectional-rnn-2/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/concat_grad/Slice"
  input: "^gradients/bidirectional-rnn-2/concat_grad/Slice_1"
}
node {
  name: "gradients/bidirectional-rnn-2/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/concat_grad/Slice"
  input: "^gradients/bidirectional-rnn-2/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/concat_grad/Slice"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/concat_grad/Slice_1"
  input: "^gradients/bidirectional-rnn-2/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/concat_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/bidirectional-rnn-2/concat_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "gradients/bidirectional-rnn-2/concat_grad/tuple/control_dependency_1"
  input: "seq_len"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Exit_2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/transpose_1_grad/transpose"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_1"
  op: "ZerosLike"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_2"
  op: "ZerosLike"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/bidirectional-rnn-2/ReverseSequence_grad/ReverseSequence"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Exit_2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/transpose_1_grad/transpose"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_3"
  op: "ZerosLike"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_4"
  op: "ZerosLike"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Exit_4_grad/b_exit"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch:1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch:1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch:1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Exit_4_grad/b_exit"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch:1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch:1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch:1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  op: "ZerosLike"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_4"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like/Enter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  op: "Select"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  op: "ZerosLike"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_4"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Shape_1"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/AddN"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Sum_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Reshape"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Reshape_1"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Reshape"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Reshape_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  op: "Select"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Shape_1"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Shape_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_2"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Sum_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Reshape"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Reshape_1"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Reshape"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Reshape_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Sum_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Reshape"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Reshape_1"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Reshape"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Reshape_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Shape_1"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul"
  op: "Mul"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Sum_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Reshape"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Reshape_1"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Reshape"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Reshape_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Sum_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Reshape"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Reshape_1"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Reshape"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Reshape_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Shape_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_3"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_3"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Sum_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Reshape"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Reshape_1"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Reshape"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Reshape_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Shape_1"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Shape_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul"
  op: "Mul"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Sum_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Reshape"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Reshape_1"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Reshape"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Reshape_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Shape_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Sum_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Reshape"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Reshape_1"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Reshape"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Reshape_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Sum"
  op: "Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Sum_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Reshape"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Reshape_1"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Reshape"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Reshape_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Sum"
  op: "Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Sum_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Reshape"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Reshape_1"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Reshape"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Reshape_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split_grad/concat"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split_grad/concat"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split_grad/concat"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split_grad/concat"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split_grad/concat"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split_grad/concat"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Const"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/StackPopV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/mod"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Slice"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Slice_1"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Slice"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Slice"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Slice_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 768
          }
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_6"
  op: "AddN"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Const"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/StackPopV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/mod"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Slice"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Slice_1"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Slice"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Slice"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Slice_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 768
          }
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_7"
  op: "AddN"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  input: "seq_len"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/AddN_8"
  op: "AddN"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/ReverseSequence_grad/ReverseSequence"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/transpose_grad/transpose"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/concat_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/concat_grad/mod"
  op: "FloorMod"
  input: "bidirectional-rnn-1/concat/axis"
  input: "gradients/bidirectional-rnn-1/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/concat_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/concat_grad/ShapeN"
  op: "ShapeN"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/transpose_1"
  input: "bidirectional-rnn-1/ReverseSequence"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/bidirectional-rnn-1/concat_grad/mod"
  input: "gradients/bidirectional-rnn-1/concat_grad/ShapeN"
  input: "gradients/bidirectional-rnn-1/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/concat_grad/Slice"
  op: "Slice"
  input: "gradients/AddN_8"
  input: "gradients/bidirectional-rnn-1/concat_grad/ConcatOffset"
  input: "gradients/bidirectional-rnn-1/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/AddN_8"
  input: "gradients/bidirectional-rnn-1/concat_grad/ConcatOffset:1"
  input: "gradients/bidirectional-rnn-1/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/concat_grad/Slice"
  input: "^gradients/bidirectional-rnn-1/concat_grad/Slice_1"
}
node {
  name: "gradients/bidirectional-rnn-1/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/concat_grad/Slice"
  input: "^gradients/bidirectional-rnn-1/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/concat_grad/Slice"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/concat_grad/Slice_1"
  input: "^gradients/bidirectional-rnn-1/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/concat_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/bidirectional-rnn-1/concat_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "gradients/bidirectional-rnn-1/concat_grad/tuple/control_dependency_1"
  input: "seq_len"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Exit_2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/transpose_1_grad/transpose"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_5"
  op: "ZerosLike"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_6"
  op: "ZerosLike"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/bidirectional-rnn-1/ReverseSequence_grad/ReverseSequence"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Exit_2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/transpose_1_grad/transpose"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_7"
  op: "ZerosLike"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_8"
  op: "ZerosLike"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Exit_4_grad/b_exit"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch:1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch:1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch:1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Exit_4_grad/b_exit"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch:1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch:1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch:1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  op: "ZerosLike"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_4"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  op: "Select"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  op: "ZerosLike"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_4"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_9"
  op: "AddN"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Shape_1"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Shape"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Shape_1"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_9"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_2"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/AddN_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_1"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Sum_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Reshape"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Reshape_1"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Reshape"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Reshape_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  op: "Select"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_10"
  op: "AddN"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Shape_1"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Shape"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Shape_1"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_10"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_2"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/AddN_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_1"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Sum_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Reshape"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Reshape_1"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Reshape"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Reshape_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_11"
  op: "AddN"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Shape"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Shape_1"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_11"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_11"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Sum_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Reshape"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Reshape_1"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Reshape"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Reshape_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/Mul/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Shape_1"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Shape"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Shape_1"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul"
  op: "Mul"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Sum_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Reshape"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Reshape_1"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Reshape"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Reshape_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Shape"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Shape_1"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_1"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Sum_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Reshape"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Reshape_1"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Reshape"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Reshape_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_12"
  op: "AddN"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Shape"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Shape_1"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_12"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_12"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Sum_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Reshape"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Reshape_1"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Reshape"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Reshape_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_13"
  op: "AddN"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Shape_1"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Shape"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Shape_1"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul"
  op: "Mul"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Sum_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Reshape"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Reshape_1"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Reshape"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Reshape_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Shape"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Shape_1"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_1"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Sum_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Reshape"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Reshape_1"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Reshape"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Reshape_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Shape"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Sum"
  op: "Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Sum_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Reshape"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Reshape_1"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Reshape"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Reshape_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_14"
  op: "AddN"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/Mul/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/Mul/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Shape"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Sum"
  op: "Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Sum_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Reshape"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Reshape_1"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Reshape"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Reshape_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split_grad/concat"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split_grad/concat"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split_grad/concat"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split_grad/concat"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split_grad/concat"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split_grad/concat"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Const"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/StackPopV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/mod"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Slice"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Slice_1"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Slice"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Slice"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Slice_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 768
          }
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_15"
  op: "AddN"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Const"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Shape"
  op: "Shape"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/StackPopV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/mod"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Slice"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Slice_1"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Slice"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Slice"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Slice_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 768
          }
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_16"
  op: "AddN"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  input: "seq_len"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/AddN_17"
  op: "AddN"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/ReverseSequence_grad/ReverseSequence"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/transpose_grad/transpose"
      }
    }
  }
}
node {
  name: "gradients/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv2d_6/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN_17"
  input: "gradients/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_6/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/Squeeze_grad/Reshape"
  input: "conv2d_6/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/conv2d_6/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/conv2d_6/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/conv2d_6/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_6/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv2d_6/Relu_grad/ReluGrad"
}
node {
  name: "gradients/conv2d_6/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_6/Relu_grad/ReluGrad"
  input: "^gradients/conv2d_6/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_6/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_6/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_6/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv2d_6/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_6/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_6/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "max_pooling2d_3/MaxPool"
  input: "conv2d_6/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_6/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_6/Conv2D_grad/ShapeN"
  input: "conv2d_6/kernel/read"
  input: "gradients/conv2d_6/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_6/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "max_pooling2d_3/MaxPool"
  input: "gradients/conv2d_6/Conv2D_grad/ShapeN:1"
  input: "gradients/conv2d_6/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_6/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_6/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_6/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_6/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_6/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_6/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_6/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/conv2d_6/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_6/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_6/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_6/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/max_pooling2d_3/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "conv2d_5/Relu"
  input: "max_pooling2d_3/MaxPool"
  input: "gradients/conv2d_6/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/conv2d_5/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/max_pooling2d_3/MaxPool_grad/MaxPoolGrad"
  input: "conv2d_5/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/conv2d_5/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/conv2d_5/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/conv2d_5/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_5/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv2d_5/Relu_grad/ReluGrad"
}
node {
  name: "gradients/conv2d_5/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_5/Relu_grad/ReluGrad"
  input: "^gradients/conv2d_5/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_5/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_5/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_5/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv2d_5/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_5/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_5/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "batch_normalization_1/FusedBatchNorm"
  input: "conv2d_5/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_5/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_5/Conv2D_grad/ShapeN"
  input: "conv2d_5/kernel/read"
  input: "gradients/conv2d_5/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_5/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "batch_normalization_1/FusedBatchNorm"
  input: "gradients/conv2d_5/Conv2D_grad/ShapeN:1"
  input: "gradients/conv2d_5/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_5/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_5/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_5/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_5/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_5/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_5/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_5/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/conv2d_5/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_5/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_5/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_5/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_9"
  op: "ZerosLike"
  input: "batch_normalization_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_10"
  op: "ZerosLike"
  input: "batch_normalization_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_11"
  op: "ZerosLike"
  input: "batch_normalization_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_12"
  op: "ZerosLike"
  input: "batch_normalization_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/conv2d_5/Conv2D_grad/tuple/control_dependency"
  input: "conv2d_4/Relu"
  input: "batch_normalization_1/gamma/read"
  input: "batch_normalization_1/moving_mean/read"
  input: "batch_normalization_1/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_4/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "conv2d_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/conv2d_4/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/conv2d_4/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/conv2d_4/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_4/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv2d_4/Relu_grad/ReluGrad"
}
node {
  name: "gradients/conv2d_4/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_4/Relu_grad/ReluGrad"
  input: "^gradients/conv2d_4/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_4/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_4/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_4/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv2d_4/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_4/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_4/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "max_pooling2d_2/MaxPool"
  input: "conv2d_4/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_4/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_4/Conv2D_grad/ShapeN"
  input: "conv2d_4/kernel/read"
  input: "gradients/conv2d_4/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_4/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "max_pooling2d_2/MaxPool"
  input: "gradients/conv2d_4/Conv2D_grad/ShapeN:1"
  input: "gradients/conv2d_4/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_4/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_4/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_4/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_4/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_4/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_4/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_4/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/conv2d_4/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_4/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_4/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_4/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/max_pooling2d_2/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "conv2d_3/Relu"
  input: "max_pooling2d_2/MaxPool"
  input: "gradients/conv2d_4/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/conv2d_3/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/max_pooling2d_2/MaxPool_grad/MaxPoolGrad"
  input: "conv2d_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/conv2d_3/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/conv2d_3/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/conv2d_3/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_3/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv2d_3/Relu_grad/ReluGrad"
}
node {
  name: "gradients/conv2d_3/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_3/Relu_grad/ReluGrad"
  input: "^gradients/conv2d_3/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_3/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_3/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_3/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv2d_3/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_3/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_3/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "batch_normalization/FusedBatchNorm"
  input: "conv2d_3/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_3/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_3/Conv2D_grad/ShapeN"
  input: "conv2d_3/kernel/read"
  input: "gradients/conv2d_3/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_3/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "batch_normalization/FusedBatchNorm"
  input: "gradients/conv2d_3/Conv2D_grad/ShapeN:1"
  input: "gradients/conv2d_3/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_3/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_3/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_3/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_3/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_3/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_3/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_3/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/conv2d_3/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_3/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_3/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_3/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_13"
  op: "ZerosLike"
  input: "batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_14"
  op: "ZerosLike"
  input: "batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_15"
  op: "ZerosLike"
  input: "batch_normalization/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_16"
  op: "ZerosLike"
  input: "batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/conv2d_3/Conv2D_grad/tuple/control_dependency"
  input: "conv2d_2/Relu"
  input: "batch_normalization/gamma/read"
  input: "batch_normalization/moving_mean/read"
  input: "batch_normalization/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "conv2d_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/conv2d_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/conv2d_2/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/conv2d_2/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_2/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv2d_2/Relu_grad/ReluGrad"
}
node {
  name: "gradients/conv2d_2/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_2/Relu_grad/ReluGrad"
  input: "^gradients/conv2d_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_2/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_2/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_2/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv2d_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_2/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "max_pooling2d_1/MaxPool"
  input: "conv2d_2/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_2/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_2/Conv2D_grad/ShapeN"
  input: "conv2d_2/kernel/read"
  input: "gradients/conv2d_2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_2/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "max_pooling2d_1/MaxPool"
  input: "gradients/conv2d_2/Conv2D_grad/ShapeN:1"
  input: "gradients/conv2d_2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_2/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_2/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_2/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_2/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_2/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/conv2d_2/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/max_pooling2d_1/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "conv2d_1/Relu"
  input: "max_pooling2d_1/MaxPool"
  input: "gradients/conv2d_2/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/conv2d_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/max_pooling2d_1/MaxPool_grad/MaxPoolGrad"
  input: "conv2d_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/conv2d_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/conv2d_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/conv2d_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv2d_1/Relu_grad/ReluGrad"
}
node {
  name: "gradients/conv2d_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_1/Relu_grad/ReluGrad"
  input: "^gradients/conv2d_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_1/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv2d_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "max_pooling2d/MaxPool"
  input: "conv2d_1/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_1/Conv2D_grad/ShapeN"
  input: "conv2d_1/kernel/read"
  input: "gradients/conv2d_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "max_pooling2d/MaxPool"
  input: "gradients/conv2d_1/Conv2D_grad/ShapeN:1"
  input: "gradients/conv2d_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_1/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/conv2d_1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/max_pooling2d/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "conv2d/Relu"
  input: "max_pooling2d/MaxPool"
  input: "gradients/conv2d_1/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/conv2d/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/max_pooling2d/MaxPool_grad/MaxPoolGrad"
  input: "conv2d/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/conv2d/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv2d/Relu_grad/ReluGrad"
}
node {
  name: "gradients/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d/Relu_grad/ReluGrad"
  input: "^gradients/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "input"
  input: "conv2d/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d/Conv2D_grad/ShapeN"
  input: "conv2d/kernel/read"
  input: "gradients/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "input"
  input: "gradients/conv2d/Conv2D_grad/ShapeN:1"
  input: "gradients/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d/kernel/Adam/Assign"
  op: "Assign"
  input: "conv2d/kernel/Adam"
  input: "conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d/kernel/Adam/read"
  op: "Identity"
  input: "conv2d/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d/kernel/Adam_1/Assign"
  op: "Assign"
  input: "conv2d/kernel/Adam_1"
  input: "conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d/kernel/Adam_1/read"
  op: "Identity"
  input: "conv2d/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d/bias/Adam/Assign"
  op: "Assign"
  input: "conv2d/bias/Adam"
  input: "conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d/bias/Adam/read"
  op: "Identity"
  input: "conv2d/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
}
node {
  name: "conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d/bias/Adam_1/Assign"
  op: "Assign"
  input: "conv2d/bias/Adam_1"
  input: "conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d/bias/Adam_1/read"
  op: "Identity"
  input: "conv2d/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "conv2d_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "conv2d_1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_1/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_1/kernel/Adam/Assign"
  op: "Assign"
  input: "conv2d_1/kernel/Adam"
  input: "conv2d_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_1/kernel/Adam/read"
  op: "Identity"
  input: "conv2d_1/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "conv2d_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "conv2d_1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_1/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_1/kernel/Adam_1/Assign"
  op: "Assign"
  input: "conv2d_1/kernel/Adam_1"
  input: "conv2d_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_1/kernel/Adam_1/read"
  op: "Identity"
  input: "conv2d_1/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_1/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_1/bias/Adam/Assign"
  op: "Assign"
  input: "conv2d_1/bias/Adam"
  input: "conv2d_1/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_1/bias/Adam/read"
  op: "Identity"
  input: "conv2d_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
}
node {
  name: "conv2d_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_1/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "conv2d_1/bias/Adam_1"
  input: "conv2d_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_1/bias/Adam_1/read"
  op: "Identity"
  input: "conv2d_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "conv2d_2/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "conv2d_2/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_2/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_2/kernel/Adam/Assign"
  op: "Assign"
  input: "conv2d_2/kernel/Adam"
  input: "conv2d_2/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_2/kernel/Adam/read"
  op: "Identity"
  input: "conv2d_2/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "conv2d_2/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "conv2d_2/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_2/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_2/kernel/Adam_1/Assign"
  op: "Assign"
  input: "conv2d_2/kernel/Adam_1"
  input: "conv2d_2/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_2/kernel/Adam_1/read"
  op: "Identity"
  input: "conv2d_2/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_2/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_2/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_2/bias/Adam/Assign"
  op: "Assign"
  input: "conv2d_2/bias/Adam"
  input: "conv2d_2/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_2/bias/Adam/read"
  op: "Identity"
  input: "conv2d_2/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
}
node {
  name: "conv2d_2/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_2/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_2/bias/Adam_1/Assign"
  op: "Assign"
  input: "conv2d_2/bias/Adam_1"
  input: "conv2d_2/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_2/bias/Adam_1/read"
  op: "Identity"
  input: "conv2d_2/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
}
node {
  name: "batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "batch_normalization/gamma/Adam"
  input: "batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "batch_normalization/gamma/Adam_1"
  input: "batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "batch_normalization/beta/Adam"
  input: "batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
}
node {
  name: "batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "batch_normalization/beta/Adam_1"
  input: "batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "conv2d_3/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "conv2d_3/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_3/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_3/kernel/Adam/Assign"
  op: "Assign"
  input: "conv2d_3/kernel/Adam"
  input: "conv2d_3/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_3/kernel/Adam/read"
  op: "Identity"
  input: "conv2d_3/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "conv2d_3/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "conv2d_3/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_3/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_3/kernel/Adam_1/Assign"
  op: "Assign"
  input: "conv2d_3/kernel/Adam_1"
  input: "conv2d_3/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_3/kernel/Adam_1/read"
  op: "Identity"
  input: "conv2d_3/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_3/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_3/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_3/bias/Adam/Assign"
  op: "Assign"
  input: "conv2d_3/bias/Adam"
  input: "conv2d_3/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_3/bias/Adam/read"
  op: "Identity"
  input: "conv2d_3/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
}
node {
  name: "conv2d_3/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_3/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_3/bias/Adam_1/Assign"
  op: "Assign"
  input: "conv2d_3/bias/Adam_1"
  input: "conv2d_3/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_3/bias/Adam_1/read"
  op: "Identity"
  input: "conv2d_3/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "conv2d_4/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "conv2d_4/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_4/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_4/kernel/Adam/Assign"
  op: "Assign"
  input: "conv2d_4/kernel/Adam"
  input: "conv2d_4/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_4/kernel/Adam/read"
  op: "Identity"
  input: "conv2d_4/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "conv2d_4/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "conv2d_4/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_4/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_4/kernel/Adam_1/Assign"
  op: "Assign"
  input: "conv2d_4/kernel/Adam_1"
  input: "conv2d_4/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_4/kernel/Adam_1/read"
  op: "Identity"
  input: "conv2d_4/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
}
node {
  name: "conv2d_4/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_4/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_4/bias/Adam/Assign"
  op: "Assign"
  input: "conv2d_4/bias/Adam"
  input: "conv2d_4/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_4/bias/Adam/read"
  op: "Identity"
  input: "conv2d_4/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
}
node {
  name: "conv2d_4/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_4/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_4/bias/Adam_1/Assign"
  op: "Assign"
  input: "conv2d_4/bias/Adam_1"
  input: "conv2d_4/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_4/bias/Adam_1/read"
  op: "Identity"
  input: "conv2d_4/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Adam/Assign"
  op: "Assign"
  input: "batch_normalization_1/gamma/Adam"
  input: "batch_normalization_1/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Adam/read"
  op: "Identity"
  input: "batch_normalization_1/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Adam_1/Assign"
  op: "Assign"
  input: "batch_normalization_1/gamma/Adam_1"
  input: "batch_normalization_1/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Adam_1/read"
  op: "Identity"
  input: "batch_normalization_1/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/beta/Adam/Assign"
  op: "Assign"
  input: "batch_normalization_1/beta/Adam"
  input: "batch_normalization_1/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/beta/Adam/read"
  op: "Identity"
  input: "batch_normalization_1/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/beta/Adam_1/Assign"
  op: "Assign"
  input: "batch_normalization_1/beta/Adam_1"
  input: "batch_normalization_1/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/beta/Adam_1/read"
  op: "Identity"
  input: "batch_normalization_1/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "conv2d_5/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "conv2d_5/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_5/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_5/kernel/Adam/Assign"
  op: "Assign"
  input: "conv2d_5/kernel/Adam"
  input: "conv2d_5/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_5/kernel/Adam/read"
  op: "Identity"
  input: "conv2d_5/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "conv2d_5/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "conv2d_5/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_5/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_5/kernel/Adam_1/Assign"
  op: "Assign"
  input: "conv2d_5/kernel/Adam_1"
  input: "conv2d_5/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_5/kernel/Adam_1/read"
  op: "Identity"
  input: "conv2d_5/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
}
node {
  name: "conv2d_5/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_5/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_5/bias/Adam/Assign"
  op: "Assign"
  input: "conv2d_5/bias/Adam"
  input: "conv2d_5/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_5/bias/Adam/read"
  op: "Identity"
  input: "conv2d_5/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
}
node {
  name: "conv2d_5/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_5/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_5/bias/Adam_1/Assign"
  op: "Assign"
  input: "conv2d_5/bias/Adam_1"
  input: "conv2d_5/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_5/bias/Adam_1/read"
  op: "Identity"
  input: "conv2d_5/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "conv2d_6/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "conv2d_6/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_6/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_6/kernel/Adam/Assign"
  op: "Assign"
  input: "conv2d_6/kernel/Adam"
  input: "conv2d_6/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_6/kernel/Adam/read"
  op: "Identity"
  input: "conv2d_6/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "conv2d_6/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "conv2d_6/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_6/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_6/kernel/Adam_1/Assign"
  op: "Assign"
  input: "conv2d_6/kernel/Adam_1"
  input: "conv2d_6/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_6/kernel/Adam_1/read"
  op: "Identity"
  input: "conv2d_6/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
}
node {
  name: "conv2d_6/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_6/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_6/bias/Adam/Assign"
  op: "Assign"
  input: "conv2d_6/bias/Adam"
  input: "conv2d_6/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_6/bias/Adam/read"
  op: "Identity"
  input: "conv2d_6/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
}
node {
  name: "conv2d_6/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_6/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_6/bias/Adam_1/Assign"
  op: "Assign"
  input: "conv2d_6/bias/Adam_1"
  input: "conv2d_6/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_6/bias/Adam_1/read"
  op: "Identity"
  input: "conv2d_6/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\003\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 768
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\003\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 768
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  op: "Fill"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\003\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 768
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\003\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 768
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  op: "Fill"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\003\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 768
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\003\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 768
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  op: "Fill"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\003\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 768
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\003\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 768
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  op: "Fill"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "W/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000%\000\000\000"
      }
    }
  }
}
node {
  name: "W/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "W/Adam/Initializer/zeros"
  op: "Fill"
  input: "W/Adam/Initializer/zeros/shape_as_tensor"
  input: "W/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 37
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "W/Adam/Assign"
  op: "Assign"
  input: "W/Adam"
  input: "W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "W/Adam/read"
  op: "Identity"
  input: "W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
}
node {
  name: "W/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000%\000\000\000"
      }
    }
  }
}
node {
  name: "W/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "W/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "W/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "W/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 37
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "W/Adam_1/Assign"
  op: "Assign"
  input: "W/Adam_1"
  input: "W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "W/Adam_1/read"
  op: "Identity"
  input: "W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
}
node {
  name: "b/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 37
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "b/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 37
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "b/Adam/Assign"
  op: "Assign"
  input: "b/Adam"
  input: "b/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "b/Adam/read"
  op: "Identity"
  input: "b/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b"
      }
    }
  }
}
node {
  name: "b/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 37
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "b/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 37
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "b/Adam_1/Assign"
  op: "Assign"
  input: "b/Adam_1"
  input: "b/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "b/Adam_1/read"
  op: "Identity"
  input: "b/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b"
      }
    }
  }
}
node {
  name: "Adam/learning_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Adam/update_conv2d/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d/kernel"
  input: "conv2d/kernel/Adam"
  input: "conv2d/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d/bias"
  input: "conv2d/bias/Adam"
  input: "conv2d/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d_1/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d_1/kernel"
  input: "conv2d_1/kernel/Adam"
  input: "conv2d_1/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d_1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d_1/bias"
  input: "conv2d_1/bias/Adam"
  input: "conv2d_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d_2/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d_2/kernel"
  input: "conv2d_2/kernel/Adam"
  input: "conv2d_2/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d_2/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d_2/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d_2/bias"
  input: "conv2d_2/bias/Adam"
  input: "conv2d_2/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d_2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "batch_normalization/gamma"
  input: "batch_normalization/gamma/Adam"
  input: "batch_normalization/gamma/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "batch_normalization/beta"
  input: "batch_normalization/beta/Adam"
  input: "batch_normalization/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d_3/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d_3/kernel"
  input: "conv2d_3/kernel/Adam"
  input: "conv2d_3/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d_3/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d_3/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d_3/bias"
  input: "conv2d_3/bias/Adam"
  input: "conv2d_3/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d_3/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d_4/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d_4/kernel"
  input: "conv2d_4/kernel/Adam"
  input: "conv2d_4/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d_4/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d_4/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d_4/bias"
  input: "conv2d_4/bias/Adam"
  input: "conv2d_4/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d_4/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_batch_normalization_1/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "batch_normalization_1/gamma"
  input: "batch_normalization_1/gamma/Adam"
  input: "batch_normalization_1/gamma/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_batch_normalization_1/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "batch_normalization_1/beta"
  input: "batch_normalization_1/beta/Adam"
  input: "batch_normalization_1/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d_5/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d_5/kernel"
  input: "conv2d_5/kernel/Adam"
  input: "conv2d_5/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d_5/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d_5/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d_5/bias"
  input: "conv2d_5/bias/Adam"
  input: "conv2d_5/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d_5/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d_6/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d_6/kernel"
  input: "conv2d_6/kernel/Adam"
  input: "conv2d_6/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d_6/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d_6/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d_6/bias"
  input: "conv2d_6/bias/Adam"
  input: "conv2d_6/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d_6/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/bidirectional-rnn-1/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/bidirectional-rnn-2/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_W/ApplyAdam"
  op: "ApplyAdam"
  input: "W"
  input: "W/Adam"
  input: "W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_b/ApplyAdam"
  op: "ApplyAdam"
  input: "b"
  input: "b/Adam"
  input: "b/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "Adam/beta1"
  input: "^Adam/update_W/ApplyAdam"
  input: "^Adam/update_b/ApplyAdam"
  input: "^Adam/update_batch_normalization/beta/ApplyAdam"
  input: "^Adam/update_batch_normalization/gamma/ApplyAdam"
  input: "^Adam/update_batch_normalization_1/beta/ApplyAdam"
  input: "^Adam/update_batch_normalization_1/gamma/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_conv2d/bias/ApplyAdam"
  input: "^Adam/update_conv2d/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_1/bias/ApplyAdam"
  input: "^Adam/update_conv2d_1/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_2/bias/ApplyAdam"
  input: "^Adam/update_conv2d_2/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_3/bias/ApplyAdam"
  input: "^Adam/update_conv2d_3/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_4/bias/ApplyAdam"
  input: "^Adam/update_conv2d_4/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_5/bias/ApplyAdam"
  input: "^Adam/update_conv2d_5/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_6/bias/ApplyAdam"
  input: "^Adam/update_conv2d_6/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
}
node {
  name: "Adam/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "Adam/beta2"
  input: "^Adam/update_W/ApplyAdam"
  input: "^Adam/update_b/ApplyAdam"
  input: "^Adam/update_batch_normalization/beta/ApplyAdam"
  input: "^Adam/update_batch_normalization/gamma/ApplyAdam"
  input: "^Adam/update_batch_normalization_1/beta/ApplyAdam"
  input: "^Adam/update_batch_normalization_1/gamma/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_conv2d/bias/ApplyAdam"
  input: "^Adam/update_conv2d/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_1/bias/ApplyAdam"
  input: "^Adam/update_conv2d_1/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_2/bias/ApplyAdam"
  input: "^Adam/update_conv2d_2/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_3/bias/ApplyAdam"
  input: "^Adam/update_conv2d_3/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_4/bias/ApplyAdam"
  input: "^Adam/update_conv2d_4/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_5/bias/ApplyAdam"
  input: "^Adam/update_conv2d_5/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_6/bias/ApplyAdam"
  input: "^Adam/update_conv2d_6/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
}
node {
  name: "Adam/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam"
  op: "NoOp"
  input: "^Adam/Assign"
  input: "^Adam/Assign_1"
  input: "^Adam/update_W/ApplyAdam"
  input: "^Adam/update_b/ApplyAdam"
  input: "^Adam/update_batch_normalization/beta/ApplyAdam"
  input: "^Adam/update_batch_normalization/gamma/ApplyAdam"
  input: "^Adam/update_batch_normalization_1/beta/ApplyAdam"
  input: "^Adam/update_batch_normalization_1/gamma/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_conv2d/bias/ApplyAdam"
  input: "^Adam/update_conv2d/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_1/bias/ApplyAdam"
  input: "^Adam/update_conv2d_1/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_2/bias/ApplyAdam"
  input: "^Adam/update_conv2d_2/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_3/bias/ApplyAdam"
  input: "^Adam/update_conv2d_3/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_4/bias/ApplyAdam"
  input: "^Adam/update_conv2d_4/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_5/bias/ApplyAdam"
  input: "^Adam/update_conv2d_5/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_6/bias/ApplyAdam"
  input: "^Adam/update_conv2d_6/kernel/ApplyAdam"
}
node {
  name: "CTCBeamSearchDecoder"
  op: "CTCBeamSearchDecoder"
  input: "transpose"
  input: "seq_len"
  attr {
    key: "beam_width"
    value {
      i: 100
    }
  }
  attr {
    key: "merge_repeated"
    value {
      b: false
    }
  }
  attr {
    key: "top_paths"
    value {
      i: 1
    }
  }
}
node {
  name: "dense_decoded/default_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "dense_decoded"
  op: "SparseToDense"
  input: "CTCBeamSearchDecoder"
  input: "CTCBeamSearchDecoder:2"
  input: "CTCBeamSearchDecoder:1"
  input: "dense_decoded/default_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "CTCBeamSearchDecoder:1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "edit_distance"
  op: "EditDistance"
  input: "CTCBeamSearchDecoder"
  input: "Cast"
  input: "CTCBeamSearchDecoder:2"
  input: "targets/indices"
  input: "targets/values"
  input: "targets/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "normalize"
    value {
      b: true
    }
  }
}
node {
  name: "Rank"
  op: "Rank"
  input: "edit_distance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "range"
  op: "Range"
  input: "range/start"
  input: "Rank"
  input: "range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Mean_1"
  op: "Mean"
  input: "edit_distance"
  input: "range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^W/Adam/Assign"
  input: "^W/Adam_1/Assign"
  input: "^W/Assign"
  input: "^b/Adam/Assign"
  input: "^b/Adam_1/Assign"
  input: "^b/Assign"
  input: "^batch_normalization/beta/Adam/Assign"
  input: "^batch_normalization/beta/Adam_1/Assign"
  input: "^batch_normalization/beta/Assign"
  input: "^batch_normalization/gamma/Adam/Assign"
  input: "^batch_normalization/gamma/Adam_1/Assign"
  input: "^batch_normalization/gamma/Assign"
  input: "^batch_normalization/moving_mean/Assign"
  input: "^batch_normalization/moving_variance/Assign"
  input: "^batch_normalization_1/beta/Adam/Assign"
  input: "^batch_normalization_1/beta/Adam_1/Assign"
  input: "^batch_normalization_1/beta/Assign"
  input: "^batch_normalization_1/gamma/Adam/Assign"
  input: "^batch_normalization_1/gamma/Adam_1/Assign"
  input: "^batch_normalization_1/gamma/Assign"
  input: "^batch_normalization_1/moving_mean/Assign"
  input: "^batch_normalization_1/moving_variance/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Assign"
  input: "^bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Assign"
  input: "^bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Assign"
  input: "^bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Assign"
  input: "^bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Assign"
  input: "^bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Assign"
  input: "^bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Assign"
  input: "^bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Assign"
  input: "^bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Assign"
  input: "^bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Assign"
  input: "^bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Assign"
  input: "^bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Assign"
  input: "^bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Assign"
  input: "^bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Assign"
  input: "^bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Assign"
  input: "^bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Assign"
  input: "^bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Assign"
  input: "^bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Assign"
  input: "^bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Assign"
  input: "^bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Assign"
  input: "^bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Assign"
  input: "^bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Assign"
  input: "^bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Assign"
  input: "^bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Assign"
  input: "^conv2d/bias/Adam/Assign"
  input: "^conv2d/bias/Adam_1/Assign"
  input: "^conv2d/bias/Assign"
  input: "^conv2d/kernel/Adam/Assign"
  input: "^conv2d/kernel/Adam_1/Assign"
  input: "^conv2d/kernel/Assign"
  input: "^conv2d_1/bias/Adam/Assign"
  input: "^conv2d_1/bias/Adam_1/Assign"
  input: "^conv2d_1/bias/Assign"
  input: "^conv2d_1/kernel/Adam/Assign"
  input: "^conv2d_1/kernel/Adam_1/Assign"
  input: "^conv2d_1/kernel/Assign"
  input: "^conv2d_2/bias/Adam/Assign"
  input: "^conv2d_2/bias/Adam_1/Assign"
  input: "^conv2d_2/bias/Assign"
  input: "^conv2d_2/kernel/Adam/Assign"
  input: "^conv2d_2/kernel/Adam_1/Assign"
  input: "^conv2d_2/kernel/Assign"
  input: "^conv2d_3/bias/Adam/Assign"
  input: "^conv2d_3/bias/Adam_1/Assign"
  input: "^conv2d_3/bias/Assign"
  input: "^conv2d_3/kernel/Adam/Assign"
  input: "^conv2d_3/kernel/Adam_1/Assign"
  input: "^conv2d_3/kernel/Assign"
  input: "^conv2d_4/bias/Adam/Assign"
  input: "^conv2d_4/bias/Adam_1/Assign"
  input: "^conv2d_4/bias/Assign"
  input: "^conv2d_4/kernel/Adam/Assign"
  input: "^conv2d_4/kernel/Adam_1/Assign"
  input: "^conv2d_4/kernel/Assign"
  input: "^conv2d_5/bias/Adam/Assign"
  input: "^conv2d_5/bias/Adam_1/Assign"
  input: "^conv2d_5/bias/Assign"
  input: "^conv2d_5/kernel/Adam/Assign"
  input: "^conv2d_5/kernel/Adam_1/Assign"
  input: "^conv2d_5/kernel/Assign"
  input: "^conv2d_6/bias/Adam/Assign"
  input: "^conv2d_6/bias/Adam_1/Assign"
  input: "^conv2d_6/bias/Assign"
  input: "^conv2d_6/kernel/Adam/Assign"
  input: "^conv2d_6/kernel/Adam_1/Assign"
  input: "^conv2d_6/kernel/Assign"
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 90
          }
        }
        string_val: "W"
        string_val: "W/Adam"
        string_val: "W/Adam_1"
        string_val: "b"
        string_val: "b/Adam"
        string_val: "b/Adam_1"
        string_val: "batch_normalization/beta"
        string_val: "batch_normalization/beta/Adam"
        string_val: "batch_normalization/beta/Adam_1"
        string_val: "batch_normalization/gamma"
        string_val: "batch_normalization/gamma/Adam"
        string_val: "batch_normalization/gamma/Adam_1"
        string_val: "batch_normalization/moving_mean"
        string_val: "batch_normalization/moving_variance"
        string_val: "batch_normalization_1/beta"
        string_val: "batch_normalization_1/beta/Adam"
        string_val: "batch_normalization_1/beta/Adam_1"
        string_val: "batch_normalization_1/gamma"
        string_val: "batch_normalization_1/gamma/Adam"
        string_val: "batch_normalization_1/gamma/Adam_1"
        string_val: "batch_normalization_1/moving_mean"
        string_val: "batch_normalization_1/moving_variance"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
        string_val: "conv2d/bias"
        string_val: "conv2d/bias/Adam"
        string_val: "conv2d/bias/Adam_1"
        string_val: "conv2d/kernel"
        string_val: "conv2d/kernel/Adam"
        string_val: "conv2d/kernel/Adam_1"
        string_val: "conv2d_1/bias"
        string_val: "conv2d_1/bias/Adam"
        string_val: "conv2d_1/bias/Adam_1"
        string_val: "conv2d_1/kernel"
        string_val: "conv2d_1/kernel/Adam"
        string_val: "conv2d_1/kernel/Adam_1"
        string_val: "conv2d_2/bias"
        string_val: "conv2d_2/bias/Adam"
        string_val: "conv2d_2/bias/Adam_1"
        string_val: "conv2d_2/kernel"
        string_val: "conv2d_2/kernel/Adam"
        string_val: "conv2d_2/kernel/Adam_1"
        string_val: "conv2d_3/bias"
        string_val: "conv2d_3/bias/Adam"
        string_val: "conv2d_3/bias/Adam_1"
        string_val: "conv2d_3/kernel"
        string_val: "conv2d_3/kernel/Adam"
        string_val: "conv2d_3/kernel/Adam_1"
        string_val: "conv2d_4/bias"
        string_val: "conv2d_4/bias/Adam"
        string_val: "conv2d_4/bias/Adam_1"
        string_val: "conv2d_4/kernel"
        string_val: "conv2d_4/kernel/Adam"
        string_val: "conv2d_4/kernel/Adam_1"
        string_val: "conv2d_5/bias"
        string_val: "conv2d_5/bias/Adam"
        string_val: "conv2d_5/bias/Adam_1"
        string_val: "conv2d_5/kernel"
        string_val: "conv2d_5/kernel/Adam"
        string_val: "conv2d_5/kernel/Adam_1"
        string_val: "conv2d_6/bias"
        string_val: "conv2d_6/bias/Adam"
        string_val: "conv2d_6/bias/Adam_1"
        string_val: "conv2d_6/kernel"
        string_val: "conv2d_6/kernel/Adam"
        string_val: "conv2d_6/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 90
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "W"
  input: "W/Adam"
  input: "W/Adam_1"
  input: "b"
  input: "b/Adam"
  input: "b/Adam_1"
  input: "batch_normalization/beta"
  input: "batch_normalization/beta/Adam"
  input: "batch_normalization/beta/Adam_1"
  input: "batch_normalization/gamma"
  input: "batch_normalization/gamma/Adam"
  input: "batch_normalization/gamma/Adam_1"
  input: "batch_normalization/moving_mean"
  input: "batch_normalization/moving_variance"
  input: "batch_normalization_1/beta"
  input: "batch_normalization_1/beta/Adam"
  input: "batch_normalization_1/beta/Adam_1"
  input: "batch_normalization_1/gamma"
  input: "batch_normalization_1/gamma/Adam"
  input: "batch_normalization_1/gamma/Adam_1"
  input: "batch_normalization_1/moving_mean"
  input: "batch_normalization_1/moving_variance"
  input: "beta1_power"
  input: "beta2_power"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "conv2d/bias"
  input: "conv2d/bias/Adam"
  input: "conv2d/bias/Adam_1"
  input: "conv2d/kernel"
  input: "conv2d/kernel/Adam"
  input: "conv2d/kernel/Adam_1"
  input: "conv2d_1/bias"
  input: "conv2d_1/bias/Adam"
  input: "conv2d_1/bias/Adam_1"
  input: "conv2d_1/kernel"
  input: "conv2d_1/kernel/Adam"
  input: "conv2d_1/kernel/Adam_1"
  input: "conv2d_2/bias"
  input: "conv2d_2/bias/Adam"
  input: "conv2d_2/bias/Adam_1"
  input: "conv2d_2/kernel"
  input: "conv2d_2/kernel/Adam"
  input: "conv2d_2/kernel/Adam_1"
  input: "conv2d_3/bias"
  input: "conv2d_3/bias/Adam"
  input: "conv2d_3/bias/Adam_1"
  input: "conv2d_3/kernel"
  input: "conv2d_3/kernel/Adam"
  input: "conv2d_3/kernel/Adam_1"
  input: "conv2d_4/bias"
  input: "conv2d_4/bias/Adam"
  input: "conv2d_4/bias/Adam_1"
  input: "conv2d_4/kernel"
  input: "conv2d_4/kernel/Adam"
  input: "conv2d_4/kernel/Adam_1"
  input: "conv2d_5/bias"
  input: "conv2d_5/bias/Adam"
  input: "conv2d_5/bias/Adam_1"
  input: "conv2d_5/kernel"
  input: "conv2d_5/kernel/Adam"
  input: "conv2d_5/kernel/Adam_1"
  input: "conv2d_6/bias"
  input: "conv2d_6/bias/Adam"
  input: "conv2d_6/bias/Adam_1"
  input: "conv2d_6/kernel"
  input: "conv2d_6/kernel/Adam"
  input: "conv2d_6/kernel/Adam_1"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 90
          }
        }
        string_val: "W"
        string_val: "W/Adam"
        string_val: "W/Adam_1"
        string_val: "b"
        string_val: "b/Adam"
        string_val: "b/Adam_1"
        string_val: "batch_normalization/beta"
        string_val: "batch_normalization/beta/Adam"
        string_val: "batch_normalization/beta/Adam_1"
        string_val: "batch_normalization/gamma"
        string_val: "batch_normalization/gamma/Adam"
        string_val: "batch_normalization/gamma/Adam_1"
        string_val: "batch_normalization/moving_mean"
        string_val: "batch_normalization/moving_variance"
        string_val: "batch_normalization_1/beta"
        string_val: "batch_normalization_1/beta/Adam"
        string_val: "batch_normalization_1/beta/Adam_1"
        string_val: "batch_normalization_1/gamma"
        string_val: "batch_normalization_1/gamma/Adam"
        string_val: "batch_normalization_1/gamma/Adam_1"
        string_val: "batch_normalization_1/moving_mean"
        string_val: "batch_normalization_1/moving_variance"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
        string_val: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
        string_val: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
        string_val: "conv2d/bias"
        string_val: "conv2d/bias/Adam"
        string_val: "conv2d/bias/Adam_1"
        string_val: "conv2d/kernel"
        string_val: "conv2d/kernel/Adam"
        string_val: "conv2d/kernel/Adam_1"
        string_val: "conv2d_1/bias"
        string_val: "conv2d_1/bias/Adam"
        string_val: "conv2d_1/bias/Adam_1"
        string_val: "conv2d_1/kernel"
        string_val: "conv2d_1/kernel/Adam"
        string_val: "conv2d_1/kernel/Adam_1"
        string_val: "conv2d_2/bias"
        string_val: "conv2d_2/bias/Adam"
        string_val: "conv2d_2/bias/Adam_1"
        string_val: "conv2d_2/kernel"
        string_val: "conv2d_2/kernel/Adam"
        string_val: "conv2d_2/kernel/Adam_1"
        string_val: "conv2d_3/bias"
        string_val: "conv2d_3/bias/Adam"
        string_val: "conv2d_3/bias/Adam_1"
        string_val: "conv2d_3/kernel"
        string_val: "conv2d_3/kernel/Adam"
        string_val: "conv2d_3/kernel/Adam_1"
        string_val: "conv2d_4/bias"
        string_val: "conv2d_4/bias/Adam"
        string_val: "conv2d_4/bias/Adam_1"
        string_val: "conv2d_4/kernel"
        string_val: "conv2d_4/kernel/Adam"
        string_val: "conv2d_4/kernel/Adam_1"
        string_val: "conv2d_5/bias"
        string_val: "conv2d_5/bias/Adam"
        string_val: "conv2d_5/bias/Adam_1"
        string_val: "conv2d_5/kernel"
        string_val: "conv2d_5/kernel/Adam"
        string_val: "conv2d_5/kernel/Adam_1"
        string_val: "conv2d_6/bias"
        string_val: "conv2d_6/bias/Adam"
        string_val: "conv2d_6/bias/Adam_1"
        string_val: "conv2d_6/kernel"
        string_val: "conv2d_6/kernel/Adam"
        string_val: "conv2d_6/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 90
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "W"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "W/Adam"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "W/Adam_1"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "b"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "b/Adam"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "b/Adam_1"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "batch_normalization/beta"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "batch_normalization/beta/Adam"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "batch_normalization/gamma"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "batch_normalization/gamma/Adam"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "batch_normalization/moving_mean"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "batch_normalization/moving_variance"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "batch_normalization_1/beta"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "batch_normalization_1/beta/Adam"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "batch_normalization_1/beta/Adam_1"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "batch_normalization_1/gamma"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "batch_normalization_1/gamma/Adam"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "batch_normalization_1/gamma/Adam_1"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "batch_normalization_1/moving_mean"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "batch_normalization_1/moving_variance"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "beta1_power"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "beta2_power"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "save/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "save/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional-rnn-2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_48"
  op: "Assign"
  input: "conv2d/bias"
  input: "save/RestoreV2:48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_49"
  op: "Assign"
  input: "conv2d/bias/Adam"
  input: "save/RestoreV2:49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_50"
  op: "Assign"
  input: "conv2d/bias/Adam_1"
  input: "save/RestoreV2:50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_51"
  op: "Assign"
  input: "conv2d/kernel"
  input: "save/RestoreV2:51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_52"
  op: "Assign"
  input: "conv2d/kernel/Adam"
  input: "save/RestoreV2:52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_53"
  op: "Assign"
  input: "conv2d/kernel/Adam_1"
  input: "save/RestoreV2:53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_54"
  op: "Assign"
  input: "conv2d_1/bias"
  input: "save/RestoreV2:54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_55"
  op: "Assign"
  input: "conv2d_1/bias/Adam"
  input: "save/RestoreV2:55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_56"
  op: "Assign"
  input: "conv2d_1/bias/Adam_1"
  input: "save/RestoreV2:56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_57"
  op: "Assign"
  input: "conv2d_1/kernel"
  input: "save/RestoreV2:57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_58"
  op: "Assign"
  input: "conv2d_1/kernel/Adam"
  input: "save/RestoreV2:58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_59"
  op: "Assign"
  input: "conv2d_1/kernel/Adam_1"
  input: "save/RestoreV2:59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_60"
  op: "Assign"
  input: "conv2d_2/bias"
  input: "save/RestoreV2:60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_61"
  op: "Assign"
  input: "conv2d_2/bias/Adam"
  input: "save/RestoreV2:61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_62"
  op: "Assign"
  input: "conv2d_2/bias/Adam_1"
  input: "save/RestoreV2:62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_63"
  op: "Assign"
  input: "conv2d_2/kernel"
  input: "save/RestoreV2:63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_64"
  op: "Assign"
  input: "conv2d_2/kernel/Adam"
  input: "save/RestoreV2:64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_65"
  op: "Assign"
  input: "conv2d_2/kernel/Adam_1"
  input: "save/RestoreV2:65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_66"
  op: "Assign"
  input: "conv2d_3/bias"
  input: "save/RestoreV2:66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_67"
  op: "Assign"
  input: "conv2d_3/bias/Adam"
  input: "save/RestoreV2:67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_68"
  op: "Assign"
  input: "conv2d_3/bias/Adam_1"
  input: "save/RestoreV2:68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_69"
  op: "Assign"
  input: "conv2d_3/kernel"
  input: "save/RestoreV2:69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_70"
  op: "Assign"
  input: "conv2d_3/kernel/Adam"
  input: "save/RestoreV2:70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_71"
  op: "Assign"
  input: "conv2d_3/kernel/Adam_1"
  input: "save/RestoreV2:71"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_72"
  op: "Assign"
  input: "conv2d_4/bias"
  input: "save/RestoreV2:72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_73"
  op: "Assign"
  input: "conv2d_4/bias/Adam"
  input: "save/RestoreV2:73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_74"
  op: "Assign"
  input: "conv2d_4/bias/Adam_1"
  input: "save/RestoreV2:74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_75"
  op: "Assign"
  input: "conv2d_4/kernel"
  input: "save/RestoreV2:75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_76"
  op: "Assign"
  input: "conv2d_4/kernel/Adam"
  input: "save/RestoreV2:76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_77"
  op: "Assign"
  input: "conv2d_4/kernel/Adam_1"
  input: "save/RestoreV2:77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_78"
  op: "Assign"
  input: "conv2d_5/bias"
  input: "save/RestoreV2:78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_79"
  op: "Assign"
  input: "conv2d_5/bias/Adam"
  input: "save/RestoreV2:79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_80"
  op: "Assign"
  input: "conv2d_5/bias/Adam_1"
  input: "save/RestoreV2:80"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_81"
  op: "Assign"
  input: "conv2d_5/kernel"
  input: "save/RestoreV2:81"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_82"
  op: "Assign"
  input: "conv2d_5/kernel/Adam"
  input: "save/RestoreV2:82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_83"
  op: "Assign"
  input: "conv2d_5/kernel/Adam_1"
  input: "save/RestoreV2:83"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_84"
  op: "Assign"
  input: "conv2d_6/bias"
  input: "save/RestoreV2:84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_85"
  op: "Assign"
  input: "conv2d_6/bias/Adam"
  input: "save/RestoreV2:85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_86"
  op: "Assign"
  input: "conv2d_6/bias/Adam_1"
  input: "save/RestoreV2:86"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_87"
  op: "Assign"
  input: "conv2d_6/kernel"
  input: "save/RestoreV2:87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_88"
  op: "Assign"
  input: "conv2d_6/kernel/Adam"
  input: "save/RestoreV2:88"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_89"
  op: "Assign"
  input: "conv2d_6/kernel/Adam_1"
  input: "save/RestoreV2:89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_3"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_4"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
  input: "^save/Assign_48"
  input: "^save/Assign_49"
  input: "^save/Assign_5"
  input: "^save/Assign_50"
  input: "^save/Assign_51"
  input: "^save/Assign_52"
  input: "^save/Assign_53"
  input: "^save/Assign_54"
  input: "^save/Assign_55"
  input: "^save/Assign_56"
  input: "^save/Assign_57"
  input: "^save/Assign_58"
  input: "^save/Assign_59"
  input: "^save/Assign_6"
  input: "^save/Assign_60"
  input: "^save/Assign_61"
  input: "^save/Assign_62"
  input: "^save/Assign_63"
  input: "^save/Assign_64"
  input: "^save/Assign_65"
  input: "^save/Assign_66"
  input: "^save/Assign_67"
  input: "^save/Assign_68"
  input: "^save/Assign_69"
  input: "^save/Assign_7"
  input: "^save/Assign_70"
  input: "^save/Assign_71"
  input: "^save/Assign_72"
  input: "^save/Assign_73"
  input: "^save/Assign_74"
  input: "^save/Assign_75"
  input: "^save/Assign_76"
  input: "^save/Assign_77"
  input: "^save/Assign_78"
  input: "^save/Assign_79"
  input: "^save/Assign_8"
  input: "^save/Assign_80"
  input: "^save/Assign_81"
  input: "^save/Assign_82"
  input: "^save/Assign_83"
  input: "^save/Assign_84"
  input: "^save/Assign_85"
  input: "^save/Assign_86"
  input: "^save/Assign_87"
  input: "^save/Assign_88"
  input: "^save/Assign_89"
  input: "^save/Assign_9"
}
versions {
  producer: 26
}
